{"ast":null,"code":"/*! loadCSS. [c]2020 Filament Group, Inc. MIT License */\n(function (w) {\n  \"use strict\";\n  /* exported loadCSS */\n\n  var loadCSS = function loadCSS(href, before, media, attributes) {\n    // Arguments explained:\n    // `href` [REQUIRED] is the URL for your CSS file.\n    // `before` [OPTIONAL] is the element the script should use as a reference for injecting our stylesheet <link> before\n    // By default, loadCSS attempts to inject the link after the last stylesheet or script in the DOM. However, you might desire a more specific location in your document.\n    // `media` [OPTIONAL] is the media type or query of the stylesheet. By default it will be 'all'\n    // `attributes` [OPTIONAL] is the Object of attribute name/attribute value pairs to set on the stylesheet's DOM Element.\n    var doc = w.document;\n    var ss = doc.createElement(\"link\");\n    var ref;\n\n    if (before) {\n      ref = before;\n    } else {\n      var refs = (doc.body || doc.getElementsByTagName(\"head\")[0]).childNodes;\n      ref = refs[refs.length - 1];\n    }\n\n    var sheets = doc.styleSheets; // Set any of the provided attributes to the stylesheet DOM Element.\n\n    if (attributes) {\n      for (var attributeName in attributes) {\n        if (attributes.hasOwnProperty(attributeName)) {\n          ss.setAttribute(attributeName, attributes[attributeName]);\n        }\n      }\n    }\n\n    ss.rel = \"stylesheet\";\n    ss.href = href; // temporarily set media to something inapplicable to ensure it'll fetch without blocking render\n\n    ss.media = \"only x\"; // wait until body is defined before injecting link. This ensures a non-blocking load in IE11.\n\n    function ready(cb) {\n      if (doc.body) {\n        return cb();\n      }\n\n      setTimeout(function () {\n        ready(cb);\n      });\n    } // Inject link\n    // Note: the ternary preserves the existing behavior of \"before\" argument, but we could choose to change the argument to \"after\" in a later release and standardize on ref.nextSibling for all refs\n    // Note: `insertBefore` is used instead of `appendChild`, for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/\n\n\n    ready(function () {\n      ref.parentNode.insertBefore(ss, before ? ref : ref.nextSibling);\n    }); // A method (exposed on return object for external use) that mimics onload by polling document.styleSheets until it includes the new sheet.\n\n    var onloadcssdefined = function onloadcssdefined(cb) {\n      var resolvedHref = ss.href;\n      var i = sheets.length;\n\n      while (i--) {\n        if (sheets[i].href === resolvedHref) {\n          return cb();\n        }\n      }\n\n      setTimeout(function () {\n        onloadcssdefined(cb);\n      });\n    };\n\n    function loadCB() {\n      if (ss.addEventListener) {\n        ss.removeEventListener(\"load\", loadCB);\n      }\n\n      ss.media = media || \"all\";\n    } // once loaded, set link's media back to `all` so that the stylesheet applies once it loads\n\n\n    if (ss.addEventListener) {\n      ss.addEventListener(\"load\", loadCB);\n    }\n\n    ss.onloadcssdefined = onloadcssdefined;\n    onloadcssdefined(loadCB);\n    return ss;\n  }; // commonjs\n\n\n  if (typeof exports !== \"undefined\") {\n    exports.loadCSS = loadCSS;\n  } else {\n    w.loadCSS = loadCSS;\n  }\n})(typeof global !== \"undefined\" ? global : this);","map":{"version":3,"sources":["/var/www/html/drawer/simple-react-app/node_modules/fg-loadcss/src/loadCSS.js"],"names":["w","loadCSS","href","before","media","attributes","doc","document","ss","createElement","ref","refs","body","getElementsByTagName","childNodes","length","sheets","styleSheets","attributeName","hasOwnProperty","setAttribute","rel","ready","cb","setTimeout","parentNode","insertBefore","nextSibling","onloadcssdefined","resolvedHref","i","loadCB","addEventListener","removeEventListener","exports","global"],"mappings":"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","sourcesContent":["/*! loadCSS. [c]2020 Filament Group, Inc. MIT License */\n(function(w){\n\t\"use strict\";\n\t/* exported loadCSS */\n\tvar loadCSS = function( href, before, media, attributes ){\n\t\t// Arguments explained:\n\t\t// `href` [REQUIRED] is the URL for your CSS file.\n\t\t// `before` [OPTIONAL] is the element the script should use as a reference for injecting our stylesheet <link> before\n\t\t// By default, loadCSS attempts to inject the link after the last stylesheet or script in the DOM. However, you might desire a more specific location in your document.\n\t\t// `media` [OPTIONAL] is the media type or query of the stylesheet. By default it will be 'all'\n\t\t// `attributes` [OPTIONAL] is the Object of attribute name/attribute value pairs to set on the stylesheet's DOM Element.\n\t\tvar doc = w.document;\n\t\tvar ss = doc.createElement( \"link\" );\n\t\tvar ref;\n\t\tif( before ){\n\t\t\tref = before;\n\t\t}\n\t\telse {\n\t\t\tvar refs = ( doc.body || doc.getElementsByTagName( \"head\" )[ 0 ] ).childNodes;\n\t\t\tref = refs[ refs.length - 1];\n\t\t}\n\n\t\tvar sheets = doc.styleSheets;\n\t\t// Set any of the provided attributes to the stylesheet DOM Element.\n\t\tif( attributes ){\n\t\t\tfor( var attributeName in attributes ){\n\t\t\t\tif( attributes.hasOwnProperty( attributeName ) ){\n\t\t\t\t\tss.setAttribute( attributeName, attributes[attributeName] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tss.rel = \"stylesheet\";\n\t\tss.href = href;\n\t\t// temporarily set media to something inapplicable to ensure it'll fetch without blocking render\n\t\tss.media = \"only x\";\n\n\t\t// wait until body is defined before injecting link. This ensures a non-blocking load in IE11.\n\t\tfunction ready( cb ){\n\t\t\tif( doc.body ){\n\t\t\t\treturn cb();\n\t\t\t}\n\t\t\tsetTimeout(function(){\n\t\t\t\tready( cb );\n\t\t\t});\n\t\t}\n\t\t// Inject link\n\t\t\t// Note: the ternary preserves the existing behavior of \"before\" argument, but we could choose to change the argument to \"after\" in a later release and standardize on ref.nextSibling for all refs\n\t\t\t// Note: `insertBefore` is used instead of `appendChild`, for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/\n\t\tready( function(){\n\t\t\tref.parentNode.insertBefore( ss, ( before ? ref : ref.nextSibling ) );\n\t\t});\n\t\t// A method (exposed on return object for external use) that mimics onload by polling document.styleSheets until it includes the new sheet.\n\t\tvar onloadcssdefined = function( cb ){\n\t\t\tvar resolvedHref = ss.href;\n\t\t\tvar i = sheets.length;\n\t\t\twhile( i-- ){\n\t\t\t\tif( sheets[ i ].href === resolvedHref ){\n\t\t\t\t\treturn cb();\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTimeout(function() {\n\t\t\t\tonloadcssdefined( cb );\n\t\t\t});\n\t\t};\n\n\t\tfunction loadCB(){\n\t\t\tif( ss.addEventListener ){\n\t\t\t\tss.removeEventListener( \"load\", loadCB );\n\t\t\t}\n\t\t\tss.media = media || \"all\";\n\t\t}\n\n\t\t// once loaded, set link's media back to `all` so that the stylesheet applies once it loads\n\t\tif( ss.addEventListener ){\n\t\t\tss.addEventListener( \"load\", loadCB);\n\t\t}\n\t\tss.onloadcssdefined = onloadcssdefined;\n\t\tonloadcssdefined( loadCB );\n\t\treturn ss;\n\t};\n\t// commonjs\n\tif( typeof exports !== \"undefined\" ){\n\t\texports.loadCSS = loadCSS;\n\t}\n\telse {\n\t\tw.loadCSS = loadCSS;\n\t}\n}( typeof global !== \"undefined\" ? global : this ));\n"]},"metadata":{},"sourceType":"script"}